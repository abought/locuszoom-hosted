# Generated by Django 2.0.13 on 2019-07-11 20:36

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import locuszoom_plotting_service.gwas.models
import locuszoom_plotting_service.gwas.util
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisFileset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('pipeline_path', models.CharField(default=locuszoom_plotting_service.gwas.models._pipeline_folder, help_text='Internal use only: path to folder of ingested data', max_length=32)),
                ('raw_gwas_file', models.FileField(help_text='The GWAS data to be uploaded. May be text-based, or (b)gzip compressed', upload_to=locuszoom_plotting_service.gwas.util.get_gwas_raw_fn, verbose_name='GWAS file')),
                ('file_sha256', models.BinaryField(help_text='The hash of the original, raw uploaded file', max_length=32)),
                ('parser_options', django.contrib.postgres.fields.jsonb.JSONField(default={}, help_text='Parser options (zorp-compatible parser kwarg names)')),
                ('ingest_status', models.IntegerField(choices=[(0, 'PENDING'), (1, 'FAILED'), (2, 'SUCCESS')], default=0, help_text='Track progress of data ingestion')),
                ('ingest_complete', models.DateTimeField(help_text='When the file finished processing (success OR failure)', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('label', models.CharField(help_text='A human-readable description, eg DIAGRAM Height GWAS', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Is this study visible to everyone?')),
                ('pmid', models.CharField(blank=True, help_text='The PubMed ID associated with a published GWAS', max_length=20, null=True, verbose_name='PMID')),
                ('build', models.CharField(choices=[('GRCh37', 'GRCh37'), ('GRCh38', 'GRCh38')], max_length=10)),
                ('n_cases', models.PositiveIntegerField(blank=True, help_text='Number of phenotype cases in sample', null=True)),
                ('n_controls', models.PositiveIntegerField(blank=True, help_text='Number of phenotype controls in sample', null=True)),
                ('files', models.OneToOneField(help_text='Where to find the processed, ingested data file for this analysis (most recently finished version)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwas.AnalysisFileset')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OntologyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='The unique identifier used by the nomenclature system', max_length=20, unique=True)),
                ('label', models.TextField(help_text='A human-readable description of the code')),
                ('scheme', models.SmallIntegerField(choices=[(1, 'SNOMED CT (Core)')], help_text='The classification scheme (SNOMED, ICDx, etc)')),
            ],
        ),
        migrations.CreateModel(
            name='RegionView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('label', models.CharField(help_text='A human-readable description of this view', max_length=100)),
                ('chrom', models.CharField(max_length=5)),
                ('start', models.PositiveIntegerField()),
                ('end', models.PositiveIntegerField()),
                ('gwas', models.ForeignKey(help_text='The study associated with this view', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwas.AnalysisInfo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='ontologyterm',
            unique_together={('code', 'scheme')},
        ),
        migrations.AddField(
            model_name='analysisinfo',
            name='top_hit_view',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='gwas.RegionView'),
        ),
        migrations.AddField(
            model_name='analysisfileset',
            name='metadata',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwas.AnalysisInfo'),
        ),
    ]
